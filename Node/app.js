/*
  Author: 	Cameron Palk
  Date:   	September 2016
  Version: 	1.0.0
*/

'use strict';

const
  express    = require('express'),
  bodyParser = require('body-parser'),
  config     = require('config'),
  crypto     = require('crypto');



// Express App
var app = express();



// App middleware
app.use(bodyParser.json({ verify: verifyRequestSignature }));
app.use(express.static('public'));
app.set('PORT', process.env.PORT || 8000);



/*
  APP_SECRET:         On App Dashoard https://developers.facebook.com/apps/1762589327347412/dashboard/
  VALIDATION_TOKEN:   Generated by me, used in Webhook validation
  PAGE_ACCESS_TOKEN:  On App Dashboard, used to connect the Facebook page
  SERVER_URL:         URL where the app is running
*/
const
  APP_SECRET        = process.env.MESSENGER_APP_SECRET ||
                      config.get('appSecret'),
  VALIDATION_TOKEN  = process.env.MESSENGER_VALIDATION_TOKEN ||
                      config.get('validationToken'),
  PAGE_ACCESS_TOKEN = process.env.MESSENGER_PAGE_ACCESS_TOKEN ||
                      config.get('pageAccessToken'),
  SERVER_URL        = process.env.SERVER_URL ||
                      config.get('serverURL');


// Ensure these required values have been found
if (!(APP_SECRET && VALIDATION_TOKEN && PAGE_ACCESS_TOKEN && SERVER_URL)) {
  console.error("Missing config values");
  process.exit(1);
}
else {
  console.log("Located app values:");
  console.log("APP_SECRET:", APP_SECRET,
              "\nVALIDATION_TOKEN:", VALIDATION_TOKEN,
              "\nPAGE_ACCESS_TOKEN:", PAGE_ACCESS_TOKEN,
              "\nSERVER_URL:", SERVER_URL);
}



/* FACEBOOK WEBHOOK VERIFICATION */
app.get('/webhook', (req, res) => {
  if (req.query['hub.mode'] === 'subscribe' &&
      req.query['hub.verify_token'] === VALIDATION_TOKEN) {
    console.log('Validating Webhook');
    res.status(200).send(req.query['hub.challenge']);
  } else {
    console.error('Failed webhook validation. Ensure validation tokens match');
    res.sendStatus(403);
  }
});



/* HANDLE MESSENGER POST CALLBACKS */
app.post('/webhook', (req, res) => {
  const data = req.body;

  console.log(data);
  if (data.object == 'page') {
    // Iterate over each page entry
    data.entry.forEach((pageEntry) => {
      const pageID = pageEntry.id;
      const timeOfEvent = pageEntry.time;

      // Iterate over each message from page
      pageEntry.messaging.forEach((messagingEvent) => {
        if      (messagingEvent.optin)            { /* Handle authentication message event */ }
        else if (messagingEvent.message)          { /* Handle recieved message */ }
        else if (messagingEvent.delivery)         { /* Handle delivery configmation event */ }
        else if (messagingEvent.read)             { /* Handle read receipt event */ }
        else if (messagingEvent.account_linking)  { /* Handle account linking event if ever implemented */ }
        else { console.log('Webhook recieved unknown messaging event:', messagingEvent); }
      });

    });

    // Facebook requires <20s successful response, otherwise the request will time out
    res.sendStatus(200);
  }
});


/* Verify that the callback came from Facebook */
function verifyRequestSignature(req, res, buf) {
  const signature = req.headers['x-hub-signature'];
  console.log("Verify Request Signature buf:", buf);

  if (!signature) {
    console.error('Couldn\'t locate request signature');
  } else {
    console.log('Attempting to validate the request signature', signature);
    const elements = signature.split('=');
    const method = elements[0];
    const signatureHash = elements[1];

    var expectedHash = crypto.createHmac('sha1', APP_SECRET)
                        .update(buf)
                        .digest('hex');

    if (signatureHash != expectedHash) {
      throw new Error("Couldn't validate the request signature, expected hash does not match.");
    }
  }
}





















app.listen(app.get('PORT'), () => {
  console.log('Node app running on port', app.get('PORT'));
});

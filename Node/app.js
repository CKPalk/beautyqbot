/*
  Author: 	Cameron Palk
  Date:   	September 2016
  Version: 	1.0.0
*/

'use strict';

const
  express    = require('express'),
  bodyParser = require('body-parser'),
  config     = require('config'),
  crypto     = require('crypto'),
  request    = require('request');



// Express App
var app = express();



// App middleware
app.use(bodyParser.json({ verify: verifyRequestSignature }));
app.use(express.static('public'));
app.set('PORT', process.env.PORT || 5000);



/*
  APP_SECRET:         On App Dashoard https://developers.facebook.com/apps/1762589327347412/dashboard/
  VALIDATION_TOKEN:   Generated by me, used in Webhook validation
  PAGE_ACCESS_TOKEN:  On App Dashboard, used to connect to correct Facebook page
  SERVER_URL:         URL where the app is running
*/
const
  APP_SECRET        = process.env.MESSENGER_APP_SECRET ||
                      config.get('appSecret'),
  VALIDATION_TOKEN  = process.env.MESSENGER_VALIDATION_TOKEN ||
                      config.get('validationToken'),
  PAGE_ACCESS_TOKEN = process.env.MESSENGER_PAGE_ACCESS_TOKEN ||
                      config.get('pageAccessToken'),
  SERVER_URL        = process.env.SERVER_URL ||
                      config.get('serverURL');


// Ensure these required values have been found
if (!(APP_SECRET && VALIDATION_TOKEN && PAGE_ACCESS_TOKEN && SERVER_URL)) {
  console.error("Missing config values");
  process.exit(1);
}
else {
  console.log("APP_SECRET:        ", APP_SECRET,
            "\nVALIDATION_TOKEN:  ", VALIDATION_TOKEN,
            "\nPAGE_ACCESS_TOKEN: ", PAGE_ACCESS_TOKEN.substr(0,30)+'..',
            "\nSERVER_URL:        ", SERVER_URL);
}



/* FACEBOOK WEBHOOK VERIFICATION
*/
app.get('/webhook', (req, res) => {
  if (req.query['hub.mode'] === 'subscribe' &&
      req.query['hub.verify_token'] === VALIDATION_TOKEN) {
    console.log('Validating Webhook');
    res.status(200).send(req.query['hub.challenge']);
  } else {
    console.error('Failed webhook validation. Ensure validation tokens match');
    res.sendStatus(403);
  }
});



/* HANDLE MESSENGER POST CALLBACKS
*/
app.post('/webhook', (req, res) => {
  const data = req.body;

  if (data.object == 'page') {
    // Iterate over each page entry
    data.entry.forEach((pageEntry) => {
      const pageID      = pageEntry.id;
      const timeOfEvent = pageEntry.time;

      // Iterate over each message from page
      pageEntry.messaging.forEach((messagingEvent) => {
        if      (messagingEvent.optin)            { receivedAuthenticationEvent(messagingEvent);        }
        else if (messagingEvent.message)          { receivedMessageEvent(messagingEvent);               }
        else if (messagingEvent.delivery)         { receivedDeliveryConfirmationEvent(messagingEvent);  }
        else if (messagingEvent.postback)         { receivedPostbackEvent(messagingEvent);              }
        else if (messagingEvent.read)             { receivedReadReceiptEvent(messagingEvent);           }
        else if (messagingEvent.account_linking)  { receivedAccountLinkEvent(messagingEvent);           }
        else { console.log('Webhook recieved unknown messaging event:', messagingEvent); }
      });

    });

    // Facebook requires <20 second successful response, otherwise the request will time out
    res.sendStatus(200);
  }
});


/* CALLBACK HANDLERS */



/** Message Event
 * 		Event called when a message is sent to your page.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-received
*/
function receivedMessageEvent(event) {
  const senderID = event.sender.id;
  const recipientID = event.recipient.id;

  const timestamp = event.timestamp;
  const message = event.message.text;

  console.log(timestamp + '|  ', senderID, '->', recipientID + ':', message);

  sendTextMessage(senderID, "Did you say \""+message+"\"?");

}


/** Authorization Event
 * 		Used with the 'Send to messenger' plugin.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication
*/
function receivedAuthenticationEvent(event) {
  console.error("Authorization event not yet implemented.");
}


/** Deliever Confirmation Event
 * 		Sent to confirm delivery of a message.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered
*/
function receivedDeliveryConfirmationEvent(event) {
  console.log("Delivery confirmation recieved from user id", event.sender.id);
}


/** Postback Event
 * 		Postback tapped on Structured Messages.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received
*/
function receivedPostbackEvent(event) {
  console.error("Postbacks are not yet implemented.");
}


/** Read Receipt Event
 * 		Called when a previously-sent message has been read.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read
*/
function receivedReadReceiptEvent(event) {
  console.log("Messege read by user id", event.sender.id);
}


/** Account Linking Event
 * 		When Link Account or Unlink Account action is tapped.
 * 		https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking
*/
function receivedAccountLinkEvent(event) {
  console.error("Account Linking is not yet implemented.");
}





/* MESSAGE SENDING */


/** Send Text Message
 * 		Send a text message using the Send API.
*/
function sendTextMessage(recipientId, messageText) {
  const messageData = {
    recipient: {
      id: recipientId
    },
    message: {
      text: messageText,
      metadata: "Metadata placeholder"
    }
  }

  callSendAPI(messageData);
}


/** Send API
 * 		Call the Send API. On success, we get message id in a response.
*/
function callSendAPI(messageData) {

  const requestData = {
    uri: 'https://graph.facebook.com/v2.6/me/messages',
    qs: { access_token: PAGE_ACCESS_TOKEN },
    method: 'POST',
    json: messageData
  }

  request(requestData, (error, response, body) => {
    if (!error && response.statusCode == 200) {
      const recipientId = body.recipient_id;
      const messageId = body.message_id;

      if (messageId) {
        console.log('Successfully sent message with id %s to recipient %s', messageId, recipientId);
      } else {
        console.log('Successfully call Sent API for recipient %s', recipientId);
      }
    } else {
      console.error(response.error);
    }
  });
}



/* CALLBACK VERIFICATION */

/* Verify that the callback came from Facebook
*/
function verifyRequestSignature(req, res, buf) {
  const signature = req.headers['x-hub-signature'];
  console.log("Verify Request Signature buf:", buf);

  if (!signature) {
    console.error('Couldn\'t locate request signature');
  } else {
    console.log('Attempting to validate the request signature', signature);
    const elements = signature.split('=');
    const method = elements[0];
    const signatureHash = elements[1];

    var expectedHash = crypto.createHmac('sha1', APP_SECRET)
                        .update(buf)
                        .digest('hex');

    if (signatureHash != expectedHash) {
      throw new Error("Couldn't validate the request signature, expected hash does not match.");
    }
  }
}



/* START APPLICATION
*/
app.listen(app.get('PORT'), () => {
  console.log('Node app running on port', app.get('PORT'));
});
